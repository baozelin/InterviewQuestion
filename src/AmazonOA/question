1. 给一个0， 1数组，要求吧所有的0和所有的1group起来，可以吧0移到数组的最前面1移到数组的最后面，或者相反。每次只能交换相邻的元素，要求算最小步数。
arr = [0, 1, 1, 0, 0]  -> [1, 1, 0, 0, 0] 最小步数为2.
arr = [1, 1, 0, 0] 已经group了最小步数为0
解法：
统计0和1个数
分两种情况 计算到左边全0右边1 或者左边1右边0因为相邻的可以自由移动，所以最优解是等于左边所有的1[0...sum_zero]到右边所有的0的距离之和[sum_zero...le‍‌‍‌‌‌‍‍‍‍‍‍‍‍‌‌‌‌‍n]， 或者左边所有的0[0...sum_one]到右边所有的1[sum_one...len]之和
two pointers 分别求左边1到右边0的dist， 左边0到右边1的dist，每次的dist加上去 然后比较两种情况的最小值



1. 给一个packets数组arr和channel k, 要求每个channel里面必须至少有一个数组里面的元素，每个元素只能在一个channel里面。要求算出所有channel中位数之和的最大值。
比如arr = [4，3，1，2，6，5] k = 3 最大的就是
channel 1 = [1, 2, 3, 4]
channel 2 = [5]
channel 3 = [6]
最大中位数之和为 (2 + 3) /2 + 5 + 6 = 14 注意有小数的2.5的话就取相邻的大的整数3.
解法：
array.sort
while channel > 1
    sum += remove last
    channel --
end
sum += the med of the remaining array